!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	0	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/45968eff/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
hackernews-graphql-js	README.md	/^# hackernews-graphql-js$/;"	c
Usage	README.md	/^## Usage$/;"	s
1. Clone repository & install dependencies	README.md	/^### 1. Clone repository & install dependencies$/;"	S
2. Install the Prisma CLI	README.md	/^### 2. Install the Prisma CLI$/;"	S
3. Deploy the Prisma database service	README.md	/^### 3. Deploy the Prisma database service$/;"	S
4. Start the server & open Playground	README.md	/^### 4. Start the server & open Playground$/;"	S
bcrypt	src/resolvers/Mutation.js	/^const bcrypt = require('bcryptjs')$/;"	C
jwt	src/resolvers/Mutation.js	/^const jwt = require('jsonwebtoken')$/;"	C
post	src/resolvers/Mutation.js	/^function post(parent, args, context, info) {$/;"	f
signup	src/resolvers/Mutation.js	/^async function signup(parent, args, context, info) {$/;"	f
login	src/resolvers/Mutation.js	/^async function login(parent, args, context, info) {$/;"	f
vote	src/resolvers/Mutation.js	/^async function vote(parent, args, context, info) {$/;"	f
links	src/resolvers/User.js	/^function links(parent, args, context) {$/;"	f
postedBy	src/resolvers/Link.js	/^function postedBy(parent, args, context) {$/;"	f
votes	src/resolvers/Link.js	/^function votes(parent, args, context) {$/;"	f
newLinkSubscribe	src/resolvers/Subscription.js	/^function newLinkSubscribe(parent, args, context, info) {$/;"	f
subscribe	src/resolvers/Subscription.js	/^  subscribe: newLinkSubscribe,$/;"	p	class:newLink
resolve	src/resolvers/Subscription.js	/^  resolve: payload => {$/;"	p	class:newLink
newLink	src/resolvers/Subscription.js	/^const newLink = {$/;"	c
newVoteSubscribe	src/resolvers/Subscription.js	/^function newVoteSubscribe(parent, args, context, info) {$/;"	f
subscribe	src/resolvers/Subscription.js	/^  subscribe: newVoteSubscribe,$/;"	p	class:newVote
resolve	src/resolvers/Subscription.js	/^  resolve: payload => {$/;"	p	class:newVote
newVote	src/resolvers/Subscription.js	/^const newVote = {$/;"	c
link	src/resolvers/Vote.js	/^function link(parent, args, context) {$/;"	f
user	src/resolvers/Vote.js	/^function user(parent, args, context) {$/;"	f
feed	src/resolvers/Query.js	/^async function feed(parent, args, context) {$/;"	f
jwt	src/utils.js	/^const jwt = require('jsonwebtoken')$/;"	C
dotenv	src/utils.js	/^const dotenv = require('dotenv')$/;"	C
getUserId	src/utils.js	/^function getUserId(context) {$/;"	f
typeDefs	src/generated/prisma-client/prisma-schema.js	/^        typeDefs: \/\/ Code generated by Prisma (prisma@1.29.1). DO NOT EDIT.$/;"	p	class:module.exports
exports	src/generated/prisma-client/prisma-schema.js	/^module.exports = {$/;"	c	class:module
prisma_lib_1	src/generated/prisma-client/index.js	/^var prisma_lib_1 = require("prisma-client-lib");$/;"	v
typeDefs	src/generated/prisma-client/index.js	/^var typeDefs = require(".\/prisma-schema").typeDefs;$/;"	v
models	src/generated/prisma-client/index.js	/^var models = [$/;"	v
Query	src/index.js	/^const Query = require('.\/resolvers\/Query')$/;"	C
Mutation	src/index.js	/^const Mutation = require('.\/resolvers\/Mutation')$/;"	C
Subscription	src/index.js	/^const Subscription = require('.\/resolvers\/Subscription')$/;"	C
User	src/index.js	/^const User = require('.\/resolvers\/User')$/;"	C
Link	src/index.js	/^const Link = require('.\/resolvers\/Link')$/;"	C
Vote	src/index.js	/^const Vote = require('.\/resolvers\/Vote')$/;"	C
resolvers	src/index.js	/^const resolvers = {$/;"	C
server	src/index.js	/^const server = new GraphQLServer({$/;"	C
name	package.json	/^  "name": "hackernews-node",$/;"	s
version	package.json	/^  "version": "1.0.0",$/;"	s
license	package.json	/^  "license": "MIT",$/;"	s
start	package.json	/^    "start": "node src\/index.js"$/;"	s	object:scripts
scripts	package.json	/^  "scripts": {$/;"	o
bcryptjs	package.json	/^    "bcryptjs": "2.4.3",$/;"	s	object:dependencies
dotenv	package.json	/^    "dotenv": "^7.0.0",$/;"	s	object:dependencies
graphql-yoga	package.json	/^    "graphql-yoga": "1.17.2",$/;"	s	object:dependencies
jsonwebtoken	package.json	/^    "jsonwebtoken": "8.4.0",$/;"	s	object:dependencies
prisma-client-lib	package.json	/^    "prisma-client-lib": "1.25.7"$/;"	s	object:dependencies
dependencies	package.json	/^  "dependencies": {$/;"	o
